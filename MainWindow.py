# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
# Created by: PyQt5 UI code generator 5.15.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



# results popup supports s11 (standard #11) and inclues both cv and well invalidations

import numpy as np


from PyQt5 import QtCore, QtGui, QtWidgets

from AllLots_p import *
from AnalyseLotsFullSX2_p import AnalyseLotsFullSX2
from AnalyseSpots_p import AnalyseSpots
from Settings import Ui_Dialog
from SpotsLayout import Ui_Frame


class Ui_MainWindow(QtWidgets.QMainWindow):
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(960, 540)
        MainWindow.resize(838, 502)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.analyzeButton = QtWidgets.QPushButton(self.centralwidget)
        self.analyzeButton.setGeometry(QtCore.QRect(70, 160, 75, 23))
        self.analyzeButton.setCheckable(False)
        self.analyzeButton.setAutoDefault(False)
        self.analyzeButton.setDefault(False)
        self.analyzeButton.setFlat(False)
        self.analyzeButton.setObjectName("analyzeButton")
        self.settingsButton = QtWidgets.QPushButton(self.centralwidget)
        self.settingsButton.setGeometry(QtCore.QRect(220, 160, 75, 23))
        self.settingsButton.setObjectName("settingsButton")
        self.progressLabel = QtWidgets.QLabel(self.centralwidget)
        self.progressLabel.setGeometry(QtCore.QRect(0, 0, 831, 500))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.progressLabel.sizePolicy().hasHeightForWidth())
        self.progressLabel.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(28)
        self.progressLabel.setFont(font)
        self.progressLabel.setStyleSheet("width:100%;")
        self.progressLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.progressLabel.setObjectName("progressLabel")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.analyzeButton.clicked.connect(self.analyze)
        self.settingsButton.clicked.connect(self.settingsClicked)
        self.progressLabel.setVisible(False)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        MainWindow.setToolTip(_translate("MainWindow", "<html><head/><body><p>Number of PDCs used to print</p></body></html>"))
        self.analyzeButton.setText(_translate("MainWindow", "Analyze"))
        self.settingsButton.setText(_translate("MainWindow", "Settings"))
        self.progressLabel.setText(_translate("MainWindow", "Analyzing...."))

    def analyze(self):
        self.analyzeButton.setDisabled(True)
        self.settingsButton.setDisabled(True)
        print('Analyze')
        folderpath = QtWidgets.QFileDialog.getExistingDirectory(None, 'Select Folder')
        if folderpath == "":
            print("no folder chosen")
        else:
            print(folderpath)
            settings = QtCore.QSettings('SQI Diagnostics', 'Array Assessor')
            self.show_progress_layer()
            # %%reading the config file
            runID = os.path.split(folderpath)[-1]
            with open(folderpath + '/' + runID + '_TgtPos.txt', newline='') as csvfile:
                config = list(csv.reader(csvfile, delimiter='\t'))
            csvfile.close()
            printer = config[0][0][len('sciFLEX_'):]
            numpdc = int(config[8][0][len('Nozzle(s):'):])
            srows = int(config[18][0][len('X = '):])
            scols = int(config[19][0][len('Y = '):])
            spotsMapping = np.array(config[25:25 + srows][:scols], dtype=object)
            spotsMapping = np.array(config[25:25 + srows][:scols])
            spots_layout = spotsMapping != ''
            spotsLayoutUI = Ui_Frame()
            spotsLayoutUI.setupUi(np.array(config[25:25 + srows][:scols], dtype=object))
            spotsLayoutUI.setupUi(np.array(config[25:25 + srows][:scols]))
            if spotsLayoutUI.exec():
                for i in range(srows):
                    for j in range(scols):
                        spotsMapping[i,j] = spotsLayoutUI.table.item(i,j).text()

            else:
                del settings
                self.hide_progress_layer()
                return
            # printer specification
            if printer == 'S11':
                initial_diameter = 29  # initial diameter of spot
                plates_max = 12
            elif printer == 'SX2':  # Scienion currently used
                initial_diameter = 37  # initial diameter of spot
                plates_max = 35

            analytes_names = np.unique(spotsMapping)
            analytes_names = np.delete(analytes_names, np.where(analytes_names == ''))
            analytes_pointer = {}
            for analyte in analytes_names:
                analytes_pointer[analyte] = []
                for i in range(spots_layout.sum()):
                    analytes_pointer[analyte].extend([str(spots_row[i]) + ' ' + str(spots_col[i]) in analyteLocations[analyte]])

            self.AllLots(folderpath, numpdc, printer, initial_diameter, spots_layout)
            AnalyseSpots(numpdc, printer, spots_layout, folderpath, n_analytes,analytes_pointer,analytes_names, spots_row, spots_col)
            AnalyseLotsFullSX2(numpdc, printer, folderpath, n_analytes,analytes_names,settings.value('CVthreshold', 3, int), settings.value('outlierLimit', 3, int))
            del settings
        self.analyzeButton.setEnabled(True)
        self.settingsButton.setEnabled(True)
            self.hide_progress_layer()

    def settingsClicked(self):
        self.analyzeButton.setDisabled(True)
        self.settingsButton.setDisabled(True)
        self.pw = QtWidgets.QLineEdit()
        self.pw.setEchoMode(QtWidgets.QLineEdit.Password)
        self.pw.returnPressed.connect(self.verifypw)
        self.pw.show()

    def verifypw(self):
        txt = self.pw.text()
        self.pw.close()
        if txt == 'password':
            settings = QtCore.QSettings('SQI Diagnostics', 'Array Assessor')
            preferences_dialog = Ui_Dialog()
            preferences_dialog.setupUi(settings)
        settings = QtCore.QSettings('SQI Diagnostics', 'Array Assessor')
        preferences_dialog = Ui_Dialog()
        preferences_dialog.setupUi(settings)

            if preferences_dialog.exec():
                settings.setValue('CVthreshold', preferences_dialog.spinBox_CVthreshold.value())
                settings.setValue('outlierLimit', preferences_dialog.spinBox_outlierLimit.value())
                del settings
        self.analyzeButton.setEnabled(True)
        self.settingsButton.setEnabled(True)
        if preferences_dialog.exec():
            settings.setValue('CVthreshold', preferences_dialog.spinBox_CVthreshold.value())
            settings.setValue('outlierLimit', preferences_dialog.spinBox_outlierLimit.value())
            del settings

    def AllLots(self, master_path, numpdc, printer, initial_diameter, spots_layout):

        # Create output rawData folder if don't exist
        data_path = master_path + '/rawData'
        if not os.path.exists(data_path):
            os.mkdir(data_path)
        print(cpu_count() - 1)
        pool = Pool(cpu_count() - 1)
        # %% Generate key segment of image filename to use for searching images and storing data
        # loop through files and perform various operation: spot finding etc.
        # wrows*wcols*plates_max gives the total number of images

        pool.map(partial(processImage, numpdc=numpdc, printer=printer,
                         initial_diameter=initial_diameter,
                         spots_layout=spots_layout, master_path=master_path,
                         data_path=data_path), glob.glob(master_path + '/*Tgt*Frame*.jpg'))

        pool.close()
        pool.close()

    def hide_progress_layer(self):
        self.progressLabel.setVisible(False)
        self.analyzeButton.setEnabled(True)
        self.settingsButton.setEnabled(True)

    def show_progress_layer(self):
        self.progressLabel.setVisible(True)
        self.analyzeButton.setEnabled(False)
        self.settingsButton.setEnabled(False)